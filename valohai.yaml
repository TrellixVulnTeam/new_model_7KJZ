---
- step:
    name: Convert Mask to GrayScale
    description: Converts Mask Images to Grayscale
    image: tensorflow/tensorflow:1.15.4-gpu-py3
    command:
        - apt-get update
        - apt-get install ffmpeg libsm6 libxext6 -y
        - pip install opencv-python
        - mkdir /valohai/outputs/
        - python research/deeplab/mask_to_grayscale.py
    inputs:
      - name: RGB-Masks-folder
        default: azure://sampledatavalohai/sampledata/Mask Image/*
        keep-directories: suffix
      - name: class-index-file
        default: azure://sampledatavalohai/sampledata/class_list.txt
      - name: metadata-filepath
        default: azure://sampledatavalohai/sampledata/metadata.json
- step:
    name: Load data and convert
    description: Converts data to TFRecord file format with Example protos
    image: tensorflow/tensorflow:1.15.4-gpu-py3
    command:
        - python research/deeplab/datasets/build_voc2012_data.py
    inputs:
      - name: Label-Folder
        keep-directories: suffix
      - name: Image-Folder
        default: azure://sampledatavalohai/sampledata/Raw_Image/*
        keep-directories: suffix
      - name: Split-Folder
        default: azure://sampledatavalohai/sampledata/SplitFolder/*
        keep-directories: suffix
- step:
    name: Batch inference
    image: tensorflow/tensorflow:1.15.4-gpu-py3
    command:
        - apt-get update
        - apt-get install ffmpeg libsm6 libxext6 -y
        - pip install -r requirements.txt
        - mkdir /valohai/outputs/results
        - python research/deeplab/batch_inference.py
    inputs:
      - name: model
        default: datum://0177d826-de0c-f542-57b1-883f9c9ad5ba
      - name: test-images
        default: azure://sampledatavalohai/sampledata/data/01EY5/01EY5YHQYRT70D8Q390Q4A0K2B/upload/6_gtFine_labelIds.png
- step:
    name: Train DeepLab model
    image: tensorflow/tensorflow:1.15.4-gpu-py3
    command:
        - export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/research/slim:`pwd`/research
        - pip install -r requirements.txt
        - unzip /valohai/inputs/tfrecords/tfrecords.zip -d /valohai/inputs/tfrecords
        - python research/deeplab/train.py --atrous_rates=6 --atrous_rates=12 --atrous_rates=18 {parameters}
    inputs:
      - name: tfrecords
        default: azure://sampledatavalohai/sampledata/data/01EY5/01EY5YHQYRT70D8Q390Q4A0K2B/output-29/tfrecords.zip
    parameters:
      - name: logtostderr
        type: flag
        default: True
        pass-as: --logtostderr={v}
      - name: training_number_of_steps
        type: integer
        default: 150000
        description: "The number of steps used for training"
      - name: train_split
        type: string
        default: "train"
        description: "Which split of the dataset to be used for training"
      - name: model_variant
        type: string
        default: "xception_65"
      - name: output_stride
        type: integer
        default: 16
      - name: decoder_output_stride
        type: integer
        default: 4
      - name: train_crop_size
        type: string
        default: "513,513"
        description: "Image crop size [height, width] during training."
      - name: train_batch_size
        type: integer
        default: 4
        description: "The number of images in each batch during training."
      - name: min_resize_value
        type: integer
        default: 513
      - name: max_resize_value
        type: integer
        default: 513
      - name: resize_factor
        type: integer
        default: 16
      - name: dataset
        type: string
        default: "pascal_voc_seg"
        description: "Name of the segmentation dataset."
      - name: train_logdir
        type: string
        default: "/valohai/repository/trainlog/"
- step:
    name: Save Frozen Graph
    description: Converts model checkpoints to frozen graph
    image: tensorflow/tensorflow:1.15.4-gpu-py3
    command:
      - export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/research/slim:`pwd`/research
      - pip install -r requirements.txt
      - mkdir /valohai/outputs/Logs
      - mkdir trainlog
      - tar -xvzf /valohai/inputs/checkpoint-path/checkpoints.tar.gz -C /valohai/repository/trainlog/
      - python research/deeplab/export_model.py {parameters}
    inputs:
      - name: checkpoint-path
        default: datum://0177d3ab-28eb-093e-3d22-67ab3616374a
    parameters:
      - name: checkpoint_path
        type: string
        default: "/valohai/repository/trainlog/"
      - name: logtostderr
        type: flag
        default: True
        pass-as: --logtostderr={v}
      - name: model_variant
        type: string
        default: "xception_65"
      - name: output_stride
        type: integer
        default: 16
      - name: decoder_output_stride
        type: integer
        default: 4
      - name: num_classes
        type: integer
        default: 3
      - name: export_path
        type: string
        default: /valohai/outputs/frozen_inference_graph.pb

- endpoint:
    name: predict-deeplab
    description: returns image
    image: drazend/car-deployment:latest
    server-command: python research/deeplab/predict.py
    files:
      - name: model
        path: frozen_inference_graph.pb
    port: 8000

- pipeline:
    name: TCSSample
    nodes:
      - name: convert-node
        type: execution
        step: Convert Mask to GrayScale
      - name: load-node
        type: execution
        step: Load data and convert
      - name: train-node
        type: execution
        step: Train DeepLab model
        override:
          inputs:
            - name: tfrecords
      - name: save-node
        type: execution
        step: Save Frozen Graph
        override: 
          inputs:
            - name: checkpoint-path
    edges:
      - [convert-node.output.*, load-node.input.Label-Folder]
      - [load-node.output.tfrecords.zip, train-node.input.tfrecords]
      - [train-node.output.*, save-node.input.checkpoint-path]
- pipeline:
    name: TCSSample with deployment
    nodes:
      - name: convert-node
        type: execution
        step: Convert Mask to GrayScale
      - name: load-node
        type: execution
        step: Load data and convert
      - name: train-node
        type: execution
        step: Train DeepLab model
        override:
          inputs:
            - name: tfrecords
      - name: save-node
        type: execution
        step: Save Frozen Graph
        override: 
          inputs:
            - name: checkpoint-path
      - name: deploy-node
        type: deployment
        deployment: test
        endpoints:
          - predict-deeplab
    edges:
      - [convert-node.output.*, load-node.input.Label-Folder]
      - [load-node.output.tfrecords.zip, train-node.input.tfrecords]
      - [train-node.output.*, save-node.input.checkpoint-path]
      - [save-node.output.*.pb, deploy-node.file.predict-deeplab.model]
